{
	// Place your comp programing workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Solution Header C++": {
		"scope": "cpp",
		"prefix": "header",
		"body": [
			"/*",
			" * Author: KurbyDoo",
			" * Creation Date: ${CURRENT_MONTH_NAME_SHORT} ${CURRENT_DATE}, ${CURRENT_YEAR}",
			" * Problem Link: ${1:link}",
			" * Problem Name: ${2:name}",
			" * Status: Unsolved",
			" * Notes:",
			" * \t",
			" * \t",
			" * \t",
			" * \t",
			" */",
		],
		"description": "Header snippet for solution files"
	},
	"Python Solution Header": {
		"scope": "python",
		"prefix": "header",
		"body": [
			"# Author: KurbyDoo",
			"# Creation Date: ${CURRENT_MONTH_NAME_SHORT} ${CURRENT_DATE}, ${CURRENT_YEAR}",
			"# Problem Link: ${1:link}",
			"# Problem Name: ${2:name}",
			"# Status: Unsolved",
			"# Notes:",
			"# \t",
			"# \t",
			"# \t",
			"# \t",
		],
		"description": "Header snippet for solution files"
	},
	"C++ Base template": {
		"scope": "cpp",
		"prefix": "base",
		"body": [
			"#include<bits/stdc++.h>",
			"",
			"using namespace std;",
			"",
			"typedef long long ll;",
			"typedef pair<ll, ll> pll;",
			"",
			"int main() {",
			"\tcin.tie(0); cin.sync_with_stdio(0);",
			"\t",
			"\t$2",
			"\t",
			"\treturn 0;",
			"}"
		],
		"description": "C++ Base code"
	},
	"C++ Quick Exponentiation": {
		"scope": "cpp",
		"prefix": "quickpow",
		"body": [
			"ll quickpow(ll n, ll exp, ll mod) {",
			"\tif (exp == 0) return 1LL;",
			"\tll res = quickpow(n, exp / 2, mod);",
			"\treturn (((res * res) % MOD) * (exp % 2 ? n : 1LL)) % MOD;",
			"}"
		],
		"description": "Binary Exponentiation"
	},
	"C++ Segment Tree": {
		"scope": "cpp",
		"prefix": "segtree",
		"body": [
			"ll _tree[400010];",
			"void build(ll i, ll l, ll r) {",
			"    if (l == r) {",
			"        // Init behaviour",
			"        return;",
			"    }",
			"    ll mid = (l + r) / 2;",
			"    build(i * 2, l, mid);",
			"    build(i * 2 + 1, mid + 1, r);",
			"    // Build behaviour",
			"}",
			"",
			"void update(ll i, ll l, ll r, ll pos, ll v) {",
			"    if (l == pos && pos == r) {",
			"        tree[i] = v;",
			"        return;",
			"    }",
			"    ll mid = (l + r) / 2;",
			"    if (pos <= mid) update(i * 2, l, mid, pos);",
			"    else update(i * 2 + 1, mid + 1, r, pos);",
			"    // Recurse update behaviour",
			"}",
			"",
			"ll query(ll i, ll l, ll r, ll ql, ll qr) {",
			"    if (l == ql && r == qr) {",
			"        return tree[i];",
			"    }",
			"    ll mid = (l + r) / 2;",
			"    if (qr <= mid) return query(i * 2, l, mid, ql, qr);",
			"    else if (mid < ql) return query(i * 2, mid + 1, l, ql, qr);",
			"    // Recurse query behaviour",
			"}"
		],
		"description": "Basic Template Segtree w/o lazy prop"
	}
}